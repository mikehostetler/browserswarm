#!/usr/bin/env node

var argv = require('optimist')
      .usage('Strider Continuous Deployment CLI\nUsage: $0 [options]')
      .argv,
    backchannel = require('../lib/backchannel'),
    everypaas = require('everypaas'),
    mongoose = require('mongoose'),
    config = require('../lib/config'),
    loader = require('strider-extension-loader'),
    middleware = require('../lib/middleware'),
    models = require('../lib/models'),
    websockets = require('../lib/websockets');
    pw = require('pw'),
    readline = require('readline'),
    User = require('../lib/models').User;

function connect() {
  var mongodbUrl = process.env.DB_URI || everypaas.getMongodbUrl();
  console.log("Connecting to MongoDB URL: %s", mongodbUrl);
  mongoose.connect(mongodbUrl);
}

function addUser(email, password, level, cb) {
  var u = new User();
  u.email = email;
  u.password = password;
  u.account_level = level;
  u.save(cb);
}


// Management mode
if (argv._.length > 0) {
  // -l <email>
  // -p <password>
  // -a
  if (argv.l && argv.p) {
    connect();
    var level = 0
    if (argv.a) {
      level = 1;
    }
    addUser(argv.l, argv.p, level, function(err) {
      if (err) {
        console.log("Error adding user:", err);
        process.exit(1);
      }
      console.log("User added successfully! Enjoy.");
      process.exit(0);
    });
  } else if (argv._.indexOf('adduser') !== -1 && argv._.length === 1) {
  // no arguments - 'adduser' subcommand means prompt

    var rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.question("Enter email []: ", function(email) {
      rl.question("Is admin? (y/n) [n]: ", function(isAdmin) {
        if (isAdmin === 'y') { 
          isAdmin = true;
        } else {
          isAdmin = false;
        }
        rl.close();
        process.stdout.write("Enter password []: ");
        pw(function(password) {
          process.stdout.write("\nEmail:\t\t" + email + "\n");
          process.stdout.write("Password:\t" + password.replace(/.*/, '****') + "\n");
          process.stdout.write("isAdmin:\t" + isAdmin + "\n");
          var rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
          });
          rl.question("OK? (y/n) [y]:", function(ok) {
            if (ok === 'y' || ok === '') {
              connect();
              addUser(email, password, isAdmin ? 1 : 0, function(err) {
                if (err) {
                  console.log("Error adding user:", err);
                  process.exit(1);
                }
                console.log("User added successfully! Enjoy.");
                process.exit(0);
              });
            } else {
              console.log("Goodbye!");
              process.exit(0);
            }
            rl.close();
          });

        });
      })
    });
  }
} else {
  // Load & initialize extensions
  var backchannel = require('../lib/backchannel');
  var common = require('../lib/common');
  var config = require('../lib/config');
  var loader = require('strider-extension-loader');
  var middleware = require('../lib/middleware');
  var models = require('../lib/models');
  var websockets = require('../lib/websockets');
  var path = require('path');
  var main = require('../main');
  // Extensions are either in ../node_modules (if local)
  // or __dirname/../
  var extdir = path.resolve(__dirname + "../node_modules");
  try {
    fs.statSync(extdir);
  } catch(e) {
    extdir = path.resolve(__dirname + "/../node_modules");
  }

  // Save extension dir
  common.extdir = extdir;
  main(extdir, null, function(err, initialized, appInstance) {
    // Handle GET 404s with custom page.
    // Comes after extensions in middleware chain as they may have
    // loaded static servers.
    appInstance.use(middleware.custom404);
    var port = config.server_port;
    appInstance.listen(port);
    // Initialize socket.io
    websockets.init(appInstance, common.session_store);
    backchannel.init();
    console.info("Express server listening on port %d in %s mode",
      port, appInstance.settings.env);
    //console.log("Environment: %j", process.env);
  })
}
