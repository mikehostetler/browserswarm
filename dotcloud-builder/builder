#!/bin/bash

packages_dir=node_modules
node_root=/opt/node

NODE_VERSION=v0.10.4
PHP_VERSION=5.4.13
if [ \! -x $node_root/php-cgi ]; then
  wget -q -O php-$PHP_VERSION.tar.gz http://us1.php.net/get/php-$PHP_VERSION.tar.gz/from/us2.php.net/mirror
  php_install_dir=$(pwd)/php-dir
  conf_dir=$(pwd)
  tar xfz php-$PHP_VERSION.tar.gz
  cd php-$PHP_VERSION
  ./configure --prefix=$node_root/php \
          --with-regex=php \
          --enable-cgi \
          --disable-rpath \
          --disable-static \
          --with-pic \
          --with-zlib \
          --with-curl \
          --with-curlwrappers \
          --enable-ftp \
          --enable-zip \
          --with-openssl \
          --enable-mbstring  \
          --enable-inline-optimization \
          --disable-debug \
          --with-config-file-path=$node_root \
          && make && make install
  cp $node_root/php/bin/php-cgi $node_root
fi

if [ $(node --version) != $(echo $NODE_VERSION | sed -e s/v//g) ]; then
    rm -rf $node_root/*
    cd $node_root
    # use binary packages
    curl -L http://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.gz | tar -zxf-
    mv node-$NODE_VERSION-linux-x64/* $node_root
fi

cd ${SERVICE_APPROOT:=.}


# Some user have their packages in their repository let's remove them,
# there is good chances that we are on a different architecture anyway.
[ -e "$packages_dir" ] && rm -rf "$packages_dir"

# Copy code to $HOME.
rsync -aH ./ $HOME/

# Install the specified dependencies.
# This will re-use already installed dependencies.
# To force the use of the latest version of a package:
# - specify a version specification in package.json;
# - or push with the "--clean" flag to discard the incremental build.
cd $HOME
[ -f package.json ] && npm install


